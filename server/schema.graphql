type Query {
  getUser(id: String): User
  getProfile(userId: String): Profile
  getTweet(id: String!): Tweet!
  getTweets(authorId: String): [Tweet!]!
  getAllTweets: [Tweet!]!
  getFavorites(tweetId: String!): [Favorite!]!
  getFollowers(followingId: String): [Follow!]!
  getFollowings(followerId: String): [Follow!]!
  getTimelines: [Timeline!]!
}

type Mutation {
  createUser(id: String!, name: String!): User!
  updateUser(name: String): User!
  upsertProfile(bio: String, location: String, url: String): Profile
  createTweet(content: String!): Tweet!
  createFavorite(tweetId: String!): Favorite!
  deleteFavorite(tweetId: String!): Favorite!
  createFollow(followingId: String!): Follow!
  deleteFollow(followingId: String!): Follow!
}

type User {
  id: String!
  createdAt: DateTime!
  name: String!
  profile: Profile
  tweets: [Tweet!]!
  retweets: [Retweet!]!
  favorites: [Favorite!]!
  following: [Follow!]!
  follower: [Follow!]!
  timeline: [Timeline!]!
}

type Profile {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  bio: String
  location: String
  url: String
  user: User!
  userId: String!
}

type Tweet {
  id: String!
  createdAt: DateTime!
  content: String!
  author: User!
  authorId: String!
  retweet: [Retweet!]!
  favorite: [Favorite!]!
  timeline: [Timeline!]!
}

type Retweet {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  retweetUser: User!
  retweetUserId: String!
  tweet: Tweet!
  tweetId: String!
}

type Favorite {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  favoriteUser: User!
  favoriteUserId: String!
  tweet: Tweet!
  tweetId: String!
}

type Follow {
  id: Int!
  createdAt: DateTime!
  following: User!
  followingId: String!
  follower: User!
  followerId: String!
}

type Timeline {
  createdAt: DateTime!
  user: User!
  userId: String!
  tweet: Tweet!
  tweetId: String!
}

scalar DateTime
